
Demo - Fairness Analysis of COMPAS by ProPublica
================================================

Based on: https://github.com/propublica/compas-analysis

What follows are the calculations performed for ProPublica’s analaysis
of the COMPAS Recidivism Risk Scores. It might be helpful to open `the
methodology <https://www.propublica.org/article/how-we-analyzed-the-compas-recidivism-algorithm/>`__
in another tab to understand the following.

.. code:: ipython3

    import numpy as np
    import pandas as pd
    from scipy import stats
    import matplotlib.pylab as plt
    import seaborn as sns
    
    from ethically.dataset import COMPASDataset
    from ethically.fairness.metrics import distplot_by

Loading the Data
----------------

We select fields for severity of charge, number of priors, demographics,
age, sex, compas scores, and whether each person was accused of a crime
within two years.

There are a number of reasons remove rows because of missing data:

-  If the charge date of a defendants Compas scored crime was not within
   30 days from when the person was arrested, we assume that because of
   data quality reasons, that we do not have the right offense.

-  We coded the recidivist flag – ``is_recid`` – to be -1 if we could
   not find a compas case at all.

-  In a similar vein, ordinary traffic offenses – those with a
   ``c_charge_degree`` of ‘O’ – will not result in Jail time are removed
   (only two of them).

-  We filtered the underlying data from Broward county to include only
   those rows representing people who had either recidivated in two
   years, or had at least two years outside of a correctional facility.

All of this is already done by instantiating a ``COMPASDataset`` object
from ``ethically``.

.. code:: ipython3

    compas_ds = COMPASDataset()
    df = compas_ds.df
    
    len(df)




.. parsed-literal::

    6172



EDA
---

Higher COMPAS scores are slightly correlated with a longer length of
stay.

.. code:: ipython3

    stats.pearsonr(df['length_of_stay'].astype(int), df['decile_score'])




.. parsed-literal::

    (0.20741201943031592, 5.943991686932148e-61)



After filtering we have the following demographic breakdown:

.. code:: ipython3

    df['age_cat'].value_counts()




.. parsed-literal::

    25 - 45            3532
    Less than 25       1347
    Greater than 45    1293
    Name: age_cat, dtype: int64



.. code:: ipython3

    df['race'].value_counts()




.. parsed-literal::

    African-American    3175
    Caucasian           2103
    Hispanic             509
    Other                343
    Asian                 31
    Native American       11
    Name: race, dtype: int64



.. code:: ipython3

    (((df['race'].value_counts() / len(df))
      * 100)
     .round(2))




.. parsed-literal::

    African-American    51.44
    Caucasian           34.07
    Hispanic             8.25
    Other                5.56
    Asian                0.50
    Native American      0.18
    Name: race, dtype: float64



.. code:: ipython3

    df['score_text'].value_counts()




.. parsed-literal::

    Low       3421
    Medium    1607
    High      1144
    Name: score_text, dtype: int64



.. code:: ipython3

    pd.crosstab(df['sex'], df['race'])




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>race</th>
          <th>African-American</th>
          <th>Asian</th>
          <th>Caucasian</th>
          <th>Hispanic</th>
          <th>Native American</th>
          <th>Other</th>
        </tr>
        <tr>
          <th>sex</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Female</th>
          <td>549</td>
          <td>2</td>
          <td>482</td>
          <td>82</td>
          <td>2</td>
          <td>58</td>
        </tr>
        <tr>
          <th>Male</th>
          <td>2626</td>
          <td>29</td>
          <td>1621</td>
          <td>427</td>
          <td>9</td>
          <td>285</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    (((df['sex'].value_counts() / len(df))
      * 100)
     .round(2))




.. parsed-literal::

    Male      80.96
    Female    19.04
    Name: sex, dtype: float64



.. code:: ipython3

    df['two_year_recid'].value_counts()




.. parsed-literal::

    0    3363
    1    2809
    Name: two_year_recid, dtype: int64



.. code:: ipython3

    (((df['two_year_recid'].value_counts() / len(df))
      * 100)
     .round(2))




.. parsed-literal::

    0    54.49
    1    45.51
    Name: two_year_recid, dtype: float64



Judges are often presented with two sets of scores from the Compas
system – one that classifies people into High, Medium and Low risk, and
a corresponding decile score. There is a clear downward trend in the
decile scores as those scores increase for white defendants.

.. code:: ipython3

    RACE_IN_FOCUS = ['African-American', 'Caucasian']
    df_race_focused = df[df['race'].isin(RACE_IN_FOCUS)]

.. code:: ipython3

    g = sns.FacetGrid(df_race_focused, col='race', height=7)#, aspect=4,)
    g.map(plt.hist, 'decile_score', rwidth=0.9);



.. image:: demo-compas-analysis_files/demo-compas-analysis_18_0.png


.. code:: ipython3

    distplot_by(df['decile_score'], df['race'], hist=False);



.. image:: demo-compas-analysis_files/demo-compas-analysis_19_0.png


.. code:: ipython3

    pd.crosstab(df['decile_score'], df['race'])




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>race</th>
          <th>African-American</th>
          <th>Asian</th>
          <th>Caucasian</th>
          <th>Hispanic</th>
          <th>Native American</th>
          <th>Other</th>
        </tr>
        <tr>
          <th>decile_score</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>365</td>
          <td>15</td>
          <td>605</td>
          <td>159</td>
          <td>0</td>
          <td>142</td>
        </tr>
        <tr>
          <th>2</th>
          <td>346</td>
          <td>4</td>
          <td>321</td>
          <td>89</td>
          <td>2</td>
          <td>60</td>
        </tr>
        <tr>
          <th>3</th>
          <td>298</td>
          <td>5</td>
          <td>238</td>
          <td>73</td>
          <td>1</td>
          <td>32</td>
        </tr>
        <tr>
          <th>4</th>
          <td>337</td>
          <td>0</td>
          <td>243</td>
          <td>47</td>
          <td>0</td>
          <td>39</td>
        </tr>
        <tr>
          <th>5</th>
          <td>323</td>
          <td>1</td>
          <td>200</td>
          <td>39</td>
          <td>0</td>
          <td>19</td>
        </tr>
        <tr>
          <th>6</th>
          <td>318</td>
          <td>2</td>
          <td>160</td>
          <td>27</td>
          <td>2</td>
          <td>20</td>
        </tr>
        <tr>
          <th>7</th>
          <td>343</td>
          <td>1</td>
          <td>113</td>
          <td>28</td>
          <td>2</td>
          <td>9</td>
        </tr>
        <tr>
          <th>8</th>
          <td>301</td>
          <td>2</td>
          <td>96</td>
          <td>14</td>
          <td>0</td>
          <td>7</td>
        </tr>
        <tr>
          <th>9</th>
          <td>317</td>
          <td>0</td>
          <td>77</td>
          <td>17</td>
          <td>2</td>
          <td>7</td>
        </tr>
        <tr>
          <th>10</th>
          <td>227</td>
          <td>1</td>
          <td>50</td>
          <td>16</td>
          <td>2</td>
          <td>8</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    pd.crosstab(df['two_year_recid'], df['race'], normalize='index')




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>race</th>
          <th>African-American</th>
          <th>Asian</th>
          <th>Caucasian</th>
          <th>Hispanic</th>
          <th>Native American</th>
          <th>Other</th>
        </tr>
        <tr>
          <th>two_year_recid</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.450193</td>
          <td>0.006839</td>
          <td>0.380910</td>
          <td>0.095153</td>
          <td>0.001784</td>
          <td>0.065120</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.591314</td>
          <td>0.002848</td>
          <td>0.292631</td>
          <td>0.067284</td>
          <td>0.001780</td>
          <td>0.044144</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    pd.crosstab(df_race_focused['two_year_recid'],
                df_race_focused['race'],
                normalize='index')




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>race</th>
          <th>African-American</th>
          <th>Caucasian</th>
        </tr>
        <tr>
          <th>two_year_recid</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.541682</td>
          <td>0.458318</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.668949</td>
          <td>0.331051</td>
        </tr>
      </tbody>
    </table>
    </div>



Fairness Demographic Classification Criteria
--------------------------------------------

Based on: https://fairmlbook.org/demographic.html

.. code:: ipython3

    from ethically.fairness.metrics import (independence_binary,
                                            separation_binary,
                                            sufficiency_binary,
                                            independence_score,
                                            separation_score,
                                            sufficiency_score,
                                            report_binary,
                                            plot_roc_by_attr)

Independence
~~~~~~~~~~~~

.. code:: ipython3

    indp, indp_cmp = independence_binary((df_race_focused['decile_score'] > 4),
                                         df_race_focused['race'],
                                         'Caucasian',
                                         as_df=True)

.. code:: ipython3

    indp, indp_cmp = independence_binary((df_race_focused['decile_score'] > 4),
                                         df_race_focused['race'],
                                         'Caucasian',
                                         as_df=True)

.. code:: ipython3

    indp.plot(kind='bar');



.. image:: demo-compas-analysis_files/demo-compas-analysis_28_0.png


.. code:: ipython3

    indp_cmp




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>acceptance_rate</th>
        </tr>
        <tr>
          <th>African-American vs. Caucasian</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>diff</th>
          <td>0.245107</td>
        </tr>
        <tr>
          <th>ratio</th>
          <td>1.740604</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    independence_score(df_race_focused['decile_score'],
                       df_race_focused['race'], as_df=True).plot();



.. image:: demo-compas-analysis_files/demo-compas-analysis_30_0.png


Separation
~~~~~~~~~~

.. code:: ipython3

    sep, sep_cmp = separation_binary(df_race_focused['two_year_recid'],
                                     (df_race_focused['decile_score'] > 4),
                                     df_race_focused['race'],
                                     'Caucasian',
                                    as_df=True)

.. code:: ipython3

    sep.plot(kind='bar');



.. image:: demo-compas-analysis_files/demo-compas-analysis_33_0.png


.. code:: ipython3

    sep_cmp




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>fnr</th>
          <th>fpr</th>
          <th>tnr</th>
          <th>tpr</th>
        </tr>
        <tr>
          <th>African-American vs. Caucasian</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>diff</th>
          <td>-0.211582</td>
          <td>0.203241</td>
          <td>-0.203241</td>
          <td>0.211582</td>
        </tr>
        <tr>
          <th>ratio</th>
          <td>0.573724</td>
          <td>1.923234</td>
          <td>0.739387</td>
          <td>1.420098</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    plot_roc_by_attr(df_race_focused['two_year_recid'],
                     df_race_focused['decile_score'],
                     df_race_focused['race'],
                     figsize=(7, 7));



.. image:: demo-compas-analysis_files/demo-compas-analysis_35_0.png


Sufficiency
~~~~~~~~~~~

.. code:: ipython3

    suff, suff_cmp = sufficiency_binary(df_race_focused['two_year_recid'],
                                       (df_race_focused['decile_score'] > 4),
                                       df_race_focused['race'],
                                       'Caucasian',
                                       as_df=True)

.. code:: ipython3

    suff.plot(kind='bar');



.. image:: demo-compas-analysis_files/demo-compas-analysis_38_0.png


.. code:: ipython3

    suff_cmp




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>npv</th>
          <th>ppv</th>
        </tr>
        <tr>
          <th>African-American vs. Caucasian</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>diff</th>
          <td>-0.061433</td>
          <td>0.054708</td>
        </tr>
        <tr>
          <th>ratio</th>
          <td>0.913477</td>
          <td>1.091972</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    sufficiency_score(df_race_focused['two_year_recid'],
                      df_race_focused['decile_score'],
                      df_race_focused['race'],
                      as_df=True).plot();



.. image:: demo-compas-analysis_files/demo-compas-analysis_40_0.png


Transforming the score to percentiles by group
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: ipython3

    sufficiency_score(df_race_focused['two_year_recid'],
                      df_race_focused['decile_score'],
                      df_race_focused['race'],
                      within_score_percentile=True,
                      as_df=True).plot();



.. image:: demo-compas-analysis_files/demo-compas-analysis_42_0.png


Generating all the relevant statistics for a binary prediction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    report_binary(df_race_focused['two_year_recid'],
                  df_race_focused['decile_score'] > 4,
                  df_race_focused['race'])




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>African-American</th>
          <th>Caucasian</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>total</th>
          <td>3175.000000</td>
          <td>2103.000000</td>
        </tr>
        <tr>
          <th>proportion</th>
          <td>0.601554</td>
          <td>0.398446</td>
        </tr>
        <tr>
          <th>base_rate</th>
          <td>0.523150</td>
          <td>0.390870</td>
        </tr>
        <tr>
          <th>acceptance_rate</th>
          <td>0.576063</td>
          <td>0.330956</td>
        </tr>
        <tr>
          <th>accuracy</th>
          <td>0.649134</td>
          <td>0.671897</td>
        </tr>
        <tr>
          <th>fnr</th>
          <td>0.284768</td>
          <td>0.496350</td>
        </tr>
        <tr>
          <th>fpr</th>
          <td>0.423382</td>
          <td>0.220141</td>
        </tr>
        <tr>
          <th>ppv</th>
          <td>0.649535</td>
          <td>0.594828</td>
        </tr>
        <tr>
          <th>npv</th>
          <td>0.648588</td>
          <td>0.710021</td>
        </tr>
      </tbody>
    </table>
    </div>


